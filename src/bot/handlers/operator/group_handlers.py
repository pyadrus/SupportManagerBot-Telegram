# -*- coding: utf-8 -*-
import re
from datetime import datetime
from typing import Optional

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from loguru import logger

from src.bot.keyboards.user_keyboards import close_appeal
from src.bot.system.dispatcher import bot, router
from src.core.database.database import (Appeal, check_manager_active_appeal,
                                        db, get_appeals,
                                        get_user_lang, update_appeal)


@router.callback_query(F.data == "accept_appeal")
async def accept_appeal(callback_query: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_username = callback_query.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = callback_query.message.html_text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        db.connect()  # –ü–æ–¥—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.create_tables([Appeal])  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        if check_manager_active_appeal(user_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            await callback_query.answer(
                "–£ –í–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", show_alert=True
            )
            """
            –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ Appeal –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ manager_id –∑–Ω–∞—á–µ–Ω–∏–µ None, —Ç–æ
            –±–µ—Ä–µ–º id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –∫–æ–ª–æ–Ω–∫—É manager_id, –≤ –∫–æ–ª–æ–Ω–∫—É status_id –≤–ø–∏—Å—ã–≤–∞–µ–º 2
            –°—Ç–∞—Ç—É—Å—ã:
            –í –æ–∂–∏–¥–∞–Ω–∏–∏
            –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
            –ó–∞–∫—Ä—ã—Ç–æ
            """
        else:
            appeal_id = extract_appeal_id(text)
            logger.info(f" –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç {appeal_id}")
            if appeal_id:
                appeal = get_appeals(appeal_id=appeal_id)
                logger.info(f"–ü—Ä–∏–Ω—è—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{appeal_id} –æ—Ç {user_id}. {appeal}")

                if appeal["user_id"] == user_id:
                    await callback_query.answer(
                        "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É", True
                    )
                    return
                await callback_query.message.edit_text(
                    f"{text}\n\nüî• –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ {f'@{user_username}' if user_username else f'<code>{user_id}</code>'}\nüïõ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: <code>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</code>"
                )
                await bot.send_message(
                    user_id,
                    f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:\n{text}",
                    reply_markup=close_appeal(appeal_id),
                )
                client_lang = get_user_lang(appeal["user_id"])
                await bot.send_message(
                    appeal["user_id"],
                    (
                        "ü§ù <b>–ú—É—Ç–∞—Ö–∞—Å—Å–∏—Å –±–∞ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –ø–∞–π–≤–∞—Å—Ç —à—É–¥.</b> –®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –æ“ì–æ–∑ –∫—É–Ω–µ–¥ ‚ú®"
                        if client_lang == "tj"
                        else "ü§ù <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.</b> –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ ‚ú®"
                    ),
                )
                update_appeal(appeal_id=appeal_id, status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", operator_id=user_id)
            else:
                await callback_query.message.edit_text("–í –æ–±—Ä–∞—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω id")
    except Exception as e:
        logger.exception(e)
    finally:
        await state.clear()


def extract_appeal_id(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        match = re.search(r"üÜî\s*<code>#(\d+)</code>", text)
        if match:
            return int(match.group(1))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID: {e}")


def register_manager_handlers_group():
    router.callback_query.register(accept_appeal, F.data == "accept_appeal")
