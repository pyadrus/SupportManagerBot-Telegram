# -*- coding: utf-8 -*-
import re
from datetime import datetime
from typing import Optional

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from loguru import logger

from src.bot.keyboards.keyboards import close_appeal
from src.bot.system.dispatcher import router, bot
from src.core.database.database import db


@router.callback_query(F.data == 'accept_appeal')
async def accept_appeal(callback_query: CallbackQuery, state: FSMContext):
    try:
        manager = await db.get_user(callback_query.from_user.id)
        if await db.check_manager_active_appeal(callback_query.from_user.id):
            await callback_query.answer("–£ –í–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", show_alert=True)
        elif not manager:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
        else:
            text = callback_query.message.html_text
            appeal_id = extract_appeal_id(text)
            if appeal_id:
                appeal = await db.get_appeal(id=appeal_id)
                if appeal['user_id'] == callback_query.from_user.id:
                    await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É", True)
                    return
                await callback_query.message.edit_text(
                    f"{text}\n\nüî• –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ {f'@{callback_query.from_user.username}' if callback_query.from_user.username else f'<code>{callback_query.from_user.id}</code>'}\nüïõ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: <code>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</code>")
                await bot.send_message(callback_query.from_user.id, f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:\n{text}",
                                       reply_markup=close_appeal(appeal_id))
                client_lang = await db.get_user_lang(appeal['user_id'])
                await bot.send_message(appeal['user_id'],
                                       "ü§ù <b>–ú—É—Ç–∞—Ö–∞—Å—Å–∏—Å –±–∞ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –ø–∞–π–≤–∞—Å—Ç —à—É–¥.</b> –®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –æ“ì–æ–∑ –∫—É–Ω–µ–¥ ‚ú®" if client_lang == "tj" else "ü§ù <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.</b> –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ ‚ú®")
                await db.update_appeal_data(appeal_id, status_id=2, manager_id=callback_query.from_user.id)
            else:
                await callback_query.message.edit_text("–í –æ–±—Ä–∞—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e} - {callback_query.message.chat.id}")
    finally:
        await state.clear()


def extract_appeal_id(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        match = re.search(r'üÜî\s*<code>#(\d+)</code>', text)
        if match:
            return int(match.group(1))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID: {e}")


def register_manager_handlers_group():
    router.callback_query.register(accept_appeal, F.data == 'accept_appeal')
