# -*- coding: utf-8 -*-
import asyncio
from datetime import datetime, timedelta

from aiogram import F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from loguru import logger

from src.bot.keyboards.admin_keyboards import admin_keyboard
from src.bot.keyboards.user_keyboards import set_rating, stat_period
from src.bot.middlewares.middlewares import (AdminFilter, ManagerAppealsFilter,
                                             UserAppealsFilter)
from src.bot.system.dispatcher import bot, router
from src.core.database.database import get_appeal, get_user_lang, update_appeal

close_timers = {}
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
AUTO_CLOSE_DELAY = 300  # —Å–µ–∫—É–Ω–¥—ã


async def close_appeal_timeout(appeal_id: int, user_id: int, manager_id: int):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        await asyncio.sleep(AUTO_CLOSE_DELAY)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω —Ä–∞–Ω–µ–µ
        if close_timers.get(appeal_id) is not asyncio.current_task():
            return

        appeal = get_appeal(id=appeal_id)
        if not appeal or appeal.get("status_id") != 2:
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")
            return

        last_msg_str = appeal.get("last_message_at")
        if not last_msg_str:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞—Ç—ã
        if isinstance(last_msg_str, str):
            last_msg_dt = datetime.strptime(last_msg_str, "%d.%m.%Y %H:%M:%S")
        else:
            last_msg_dt = last_msg_str  # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç

        elapsed = (datetime.now() - last_msg_dt).total_seconds()

        if elapsed >= AUTO_CLOSE_DELAY:
            update_appeal(appeal_id, status_id=3)
            lang = get_user_lang(user_id)

            await bot.send_message(
                user_id,
                (
                    "–õ—É—Ç—Ñ–∞–Ω —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–¥–º–∞—Ç—Ä–æ –∞—Ä–∑–µ–±”£ –∫—É–Ω–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º"
                    if lang == "tj"
                    else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ ‚ú®"
                ),
                reply_markup=set_rating(appeal_id),
            )
            await bot.send_message(
                manager_id,
                f"<b>‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ</b>. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª",
            )
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ #{appeal_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

    except asyncio.CancelledError:
        logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
        raise
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}: {e}"
        )
    finally:
        close_timers.pop(appeal_id, None)


@router.message(F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"]))
async def close_appeal_by_manager(message: Message):
    try:
        appeal = get_appeal(operator_id=message.from_user.id, status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        logger.info(appeal)

        if not appeal:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        await del_close_timer(appeal["id"])
        update_appeal(
            appeal_id=appeal["id"], status="–ó–∞–∫—Ä—ã—Ç–æ", operator_id=message.from_user.id
        )
        lang_client = get_user_lang(appeal["user_id"])
        await bot.send_message(
            appeal["user_id"],
            (
                "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å”Ø“≥–±–∞—Ç—Ä–æ –∞–Ω“∑–æ–º –¥–æ–¥. –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –º—É—Ä–æ“∑–∏–∞—Ç! –õ—É—Ç—Ñ–∞–Ω, —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏—Ä–æ –±–∞“≥–æ –¥–∏“≥–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º. ‚ú®"
                if lang_client == "tj"
                else "–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ. ‚ú®"
            ),
            reply_markup=set_rating(appeal["id"]),
        )
        await message.answer(
            f"‚úÖ <b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç</b> –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª"
        )
        logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è - {message.from_user.id}")
    except Exception as e:
        logger.exception(e)
        # await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏")


@router.message(ManagerAppealsFilter(), F.text)
async def manager_answer_appeal(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {message.from_user.id}")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        appeal = get_appeal(operator_id=message.from_user.id)
        logger.info(appeal)
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–∞
        await bot.send_message(appeal["user_id"], message.text)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        await start_timer(appeal["id"], appeal["user_id"], message.from_user.id)
    except Exception as e:
        logger.exception(e)


async def start_timer(appeal_id: int, user_id: int, manager_id: int):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    if appeal_id in close_timers:
        close_timers[appeal_id].cancel()
    task = asyncio.create_task(close_appeal_timeout(appeal_id, user_id, manager_id))
    close_timers[appeal_id] = task


async def del_close_timer(appeal_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
    task = close_timers.pop(appeal_id, None)
    if task:
        task.cancel()


@router.message(UserAppealsFilter(), F.text)
async def client_answer_appeal(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    try:
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - {message.from_user.id}")
        # appeal = get_appeal(user_id=message.from_user.id)
        #
        # if appeal and isinstance(appeal, dict):
        #     if appeal["operator_id"]:
        #         await bot.send_message(appeal["operator_id"], f"üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç:\n{message.text}")
        #         update_appeal(
        #             appeal["id"],
        #             last_message_at=datetime.now()
        #         )
        # await start_timer(appeal["id"], appeal["user_id"], appeal["operator_id"])
        # else:
        #     await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        # else:
        #     await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.exception(e)
        # logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e} - {message.from_user.id}")
        # await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@router.message(Command(commands=["admin"]), AdminFilter())
async def admin(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
    try:
        logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin - {message.chat.id}")
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=admin_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /admin: {e} - {message.chat.id}")


def register_handlers_admin():
    # --- Callback handlers ---
    router.callback_query.register(
        close_appeal_by_manager, F.data == "close_appeal_by_manager"
    )  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞
    router.callback_query.register(set_rating, F.data.startswith("set_rating-"))

    # --- Message handlers (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
    router.message.register(manager_answer_appeal, F.text)
    router.message.register(client_answer_appeal, F.text)
    router.message.register(
        close_appeal_by_manager, F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"])
    )

    # --- Command handlers ---
    router.message.register(admin, Command(commands=["admin"]), AdminFilter())
