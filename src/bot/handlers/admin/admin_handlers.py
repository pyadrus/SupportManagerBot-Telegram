# -*- coding: utf-8 -*-
import asyncio
from datetime import datetime

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from loguru import logger

from src.bot.keyboards.admin_keyboards import admin_keyboard
from src.bot.keyboards.user_keyboards import set_rating
from src.bot.middlewares.middlewares import AdminFilter, ManagerAppealsFilter, UserAppealsFilter
from src.bot.system.dispatcher import bot, router
from src.core.database.database import get_appeal, get_user_lang, update_appeal

close_timers = {}
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
AUTO_CLOSE_DELAY = 20  # —Å–µ–∫—É–Ω–¥—ã


async def close_appeal_timeout(appeal_id: int, user_id: int, operator_id: int):
    """
    –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

    :param appeal_id: ID –æ–±—Ä–∞—â–µ–Ω–∏—è
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param operator_id: ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    """
    try:
        logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} (–æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        await asyncio.sleep(AUTO_CLOSE_DELAY)

        appeal = get_appeal(appeal_id=appeal_id)
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id}: {appeal}")
        if not appeal or appeal.get("status") != "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Å—Ç–∞—Ç—É—Å: {appeal.get('status') if appeal else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            return

        last_msg = appeal.get("last_message_at")
        if not last_msg:
            logger.warning(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø last_message_at
        if isinstance(last_msg, str):
            try:
                last_msg_dt = datetime.strptime(last_msg, "%d.%m.%Y %H:%M:%S")
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ last_message_at –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id}: {last_msg}, –æ—à–∏–±–∫–∞: {e}")
                return
        else:
            last_msg_dt = last_msg  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç

        elapsed = (datetime.now() - last_msg_dt).total_seconds()
        logger.info(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id}: {elapsed} —Å–µ–∫—É–Ω–¥")

        if elapsed >= AUTO_CLOSE_DELAY:
            update_appeal(
                appeal_id=appeal_id,
                status="–ó–∞–∫—Ä—ã—Ç–æ",
                operator_id=operator_id,
                last_message_at=datetime.now()
            )
            lang = get_user_lang(user_id)
            await bot.send_message(
                user_id,
                (
                    "–õ—É—Ç—Ñ–∞–Ω —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–¥–º–∞—Ç—Ä–æ –∞—Ä–∑–µ–±”£ –∫—É–Ω–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º"
                    if lang == "tj"
                    else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ ‚ú®"
                ),
                reply_markup=set_rating(appeal_id),
            )
            await bot.send_message(
                operator_id,
                f"<b>‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ</b>. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª",
            )
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ #{appeal_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
        else:
            logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{appeal_id} –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ: –ø—Ä–æ—à–ª–æ {elapsed} —Å–µ–∫—É–Ω–¥, —Ç—Ä–µ–±—É–µ—Ç—Å—è {AUTO_CLOSE_DELAY} —Å–µ–∫—É–Ω–¥")

    except asyncio.CancelledError:
        logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")
        raise
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id}: {e}")
    finally:
        close_timers.pop(appeal_id, None)


@router.message(F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"]))
async def close_appeal_by_manager(message: Message):
    try:
        appeal = get_appeal(operator_id=message.from_user.id, status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        logger.info(appeal)

        if not appeal:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        await del_close_timer(appeal["id"])
        update_appeal(appeal_id=appeal["id"], status="–ó–∞–∫—Ä—ã—Ç–æ", operator_id=message.from_user.id,
                      last_message_at=datetime.now())
        lang_client = get_user_lang(appeal["user_id"])
        await bot.send_message(
            appeal["user_id"],
            (
                "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å”Ø“≥–±–∞—Ç—Ä–æ –∞–Ω“∑–æ–º –¥–æ–¥. –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –º—É—Ä–æ“∑–∏–∞—Ç! –õ—É—Ç—Ñ–∞–Ω, —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏—Ä–æ –±–∞“≥–æ –¥–∏“≥–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º. ‚ú®"
                if lang_client == "tj"
                else "–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ. ‚ú®"
            ),
            reply_markup=set_rating(appeal["id"]),
        )
        await message.answer(
            f"‚úÖ <b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç</b> –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª"
        )
        logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è - {message.from_user.id}")
    except Exception as e:
        logger.exception(e)
        # await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏")


@router.message(ManagerAppealsFilter(), F.text)
async def manager_answer_appeal(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {message.from_user.id}")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        appeal = get_appeal(operator_id=message.from_user.id)
        logger.info(appeal)
        if not appeal:  # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–∞
        await bot.send_message(appeal["user_id"], message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        update_appeal(
            appeal_id=appeal["id"],  # id –æ–±—Ä–∞—â–µ–Ω–∏—è
            status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",  # —Å—Ç–∞—Ç—É—Å
            operator_id=message.from_user.id,  # id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            last_message_at=datetime.now()  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        await start_timer(appeal["id"], appeal["user_id"], message.from_user.id)
    except Exception as e:
        logger.exception(e)


@router.message(UserAppealsFilter(), F.text)
async def client_answer_appeal(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    try:
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - {message.from_user.id}")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        appeal = get_appeal(user_id=message.from_user.id)
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ: {appeal}")
        if not appeal:  # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            logger.warning(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è
        operator_id = appeal["operator_id"]
        await bot.send_message(
            operator_id,
            f"üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç:\n{message.text}"
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        update_appeal(
            appeal_id=appeal["id"],  # id –æ–±—Ä–∞—â–µ–Ω–∏—è
            status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",  # —Å—Ç–∞—Ç—É—Å
            operator_id=operator_id,  # id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            last_message_at=datetime.now()  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal['id']}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        await start_timer(appeal["id"], appeal["user_id"], operator_id)
        logger.info(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal['id']} —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {operator_id}")
    except Exception as e:
        logger.exception(e)


async def start_timer(appeal_id: int, user_id: int, operator_id: int):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await del_close_timer(appeal_id)
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    task = asyncio.create_task(close_appeal_timeout(appeal_id, user_id, operator_id))
    close_timers[appeal_id] = task
    logger.info(f"–ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id}")


async def del_close_timer(appeal_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
    task = close_timers.get(appeal_id)
    if task:
        try:
            task.cancel()
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
            await asyncio.sleep(0)  # –î–∞—ë–º —à–∞–Ω—Å –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω")
        except asyncio.CancelledError:
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{appeal_id} –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–º–µ–Ω—ã")
        finally:
            close_timers.pop(appeal_id, None)


@router.message(Command(commands=["admin"]), AdminFilter())
async def admin(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
    try:
        logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin - {message.chat.id}")
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=admin_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /admin: {e} - {message.chat.id}")


def register_handlers_admin():
    # --- Callback handlers ---
    router.callback_query.register(
        close_appeal_by_manager, F.data == "close_appeal_by_manager"
    )  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞
    router.callback_query.register(set_rating, F.data.startswith("set_rating-"))

    # --- Message handlers (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
    router.message.register(manager_answer_appeal, F.text)
    router.message.register(client_answer_appeal, F.text)
    router.message.register(close_appeal_by_manager, F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"]))

    # --- Command handlers ---
    router.message.register(admin, Command(commands=["admin"]), AdminFilter())
