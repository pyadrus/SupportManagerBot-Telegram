# -*- coding: utf-8 -*-
import asyncio
from datetime import datetime, timedelta

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from loguru import logger

from src.bot.keyboards.admin_keyboards import admin_keyboard
from src.bot.keyboards.user_keyboards import set_rating, stat_period
from src.bot.middlewares.middlewares import (
    AdminFilter,
    # ManagerAppealsFilter,
    # UserAppealsFilter,
)
from src.bot.system.dispatcher import bot, router
from src.core.database.database import (
    # get_appeal,
    update_appeal,
    get_user_lang,
)

close_timers = {}


async def close_appeal_timeout(
        appeal_id: int, user_id: int, manager_id: int, timeout_seconds=30
):
    try:
        while True:
            await asyncio.sleep(5)
            # appeal = get_appeal(id=appeal_id)
            appeal = None
            if not appeal or appeal.get("status_id") != 2:
                logger.info(f"–¢–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{appeal_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break

            last_msg_str = appeal.get("last_message_at")
            if not last_msg_str:
                continue

            last_msg_dt = datetime.strptime(last_msg_str, "%d.%m.%Y %H:%M:%S")
            elapsed = (datetime.now() - last_msg_dt).total_seconds()

            if elapsed >= timeout_seconds:
                update_appeal(appeal_id, status_id=3)
                lang = get_user_lang(user_id)
                await bot.send_message(
                    user_id,
                    (
                        "–õ—É—Ç—Ñ–∞–Ω —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–¥–º–∞—Ç—Ä–æ –∞—Ä–∑–µ–±”£ –∫—É–Ω–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º"
                        if lang == "tj"
                        else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ ‚ú®"
                    ),
                    reply_markup=set_rating(appeal_id),
                )
                await bot.send_message(
                    manager_id,
                    f"<b>‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ</b>. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª",
                )
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ #{appeal_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏ #{appeal_id}: {e}")
    finally:
        close_timers.pop(appeal_id, None)


async def start_timer(appeal_id: int, user_id: int, manager_id: int):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    if appeal_id in close_timers:
        close_timers[appeal_id].cancel()
    task = asyncio.create_task(close_appeal_timeout(appeal_id, user_id, manager_id))
    close_timers[appeal_id] = task


async def del_close_timer(appeal_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
    task = close_timers.pop(appeal_id, None)
    if task:
        task.cancel()


@router.callback_query(F.data == "statistic", AdminFilter())
async def ask_period(call: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stat_period()
    )


@router.callback_query(F.data.startswith("statistic-"))
async def statistics(call: CallbackQuery):
    try:
        period = call.data.split("-")[1]

        now = datetime.now()
        from_date = now - timedelta(days=int(period))

        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period} - {call.from_user.id}")

        appeals_raw = None
        # appeals_raw = get_appeal()

        if isinstance(appeals_raw, dict):
            appeals = [appeals_raw] if appeals_raw else []
        elif isinstance(appeals_raw, list):
            appeals = appeals_raw
        else:
            appeals = []

        filtered_appeals = []
        for a in appeals:
            if not a or not a.get("last_message_at"):
                continue
            try:
                last_msg_dt = datetime.strptime(
                    a["last_message_at"], "%d.%m.%Y %H:%M:%S"
                )
                if last_msg_dt >= from_date:
                    filtered_appeals.append(a)
            except Exception:
                continue

        stats_by_manager = {}
        for appeal in filtered_appeals:
            manager_id = appeal.get("manager_id")
            if not manager_id:
                continue
            if manager_id not in stats_by_manager:
                stats_by_manager[manager_id] = {"count": 0, "ratings": []}
            stats_by_manager[manager_id]["count"] += 1
            if appeal.get("rating") is not None:
                stats_by_manager[manager_id]["ratings"].append(appeal["rating"])

        manager_texts = []
        for manager_id, data in stats_by_manager.items():
            try:
                manager = await bot.get_chat(manager_id)
                manager_name = (
                    f"@{manager.username}"
                    if manager.username
                    else f"–û–ø–µ—Ä–∞—Ç–æ—Ä {manager_id}"
                )
            except Exception:
                manager_name = f"–û–ø–µ—Ä–∞—Ç–æ—Ä {manager_id}"
            count = data["count"]
            avg_rating = (
                round(sum(data["ratings"]) / len(data["ratings"]), 2)
                if data["ratings"]
                else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            )
            manager_texts.append(
                f"üë§ <b>{manager_name}</b>:\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: <b>{count}</b>\n–†–µ–π—Ç–∏–Ω–≥: <b>{avg_rating}</b>"
            )

        appeals_statuses = {}
        ratings_all = []
        for appeal in filtered_appeals:
            status_id = appeal.get("status_id")
            if status_id:
                appeals_statuses[status_id] = appeals_statuses.get(status_id, 0) + 1
            if appeal.get("rating") is not None:
                ratings_all.append(appeal["rating"])

        status_texts = []
        for status_id, count in appeals_statuses.items():
            # status_name = get_status_name(status_id) or f"–°—Ç–∞—Ç—É—Å {status_id}"
            status_name = None
            status_texts.append(f"{status_name}: {count}")
        avg_rating = (
            round(sum(ratings_all) / len(ratings_all), 2)
            if ratings_all
            else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        )
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> <i>{period} —Å—É—Ç–æ–∫</i>\n\n"
        if manager_texts:
            text += "\n\n".join(manager_texts)
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º\n"
        status_text = (
            "\n".join(status_texts) if status_texts else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º\n"
        )
        text += f"\n\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n{status_text}\n‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating}"

        await call.message.edit_text(text, reply_markup=admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e} - {call.from_user.id}")
        await call.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=admin_keyboard()
        )


@router.message(F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"]))
async def close_appeal_by_manager(message: Message):
    try:
        appeal = None
        # appeal = get_appeal(manager_id=message.from_user.id, status_id=2)
        if not appeal:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        await del_close_timer(appeal["id"])
        update_appeal(appeal["id"], status_id=3)
        lang_client = get_user_lang(appeal["user_id"])
        await bot.send_message(
            appeal["user_id"],
            (
                "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å”Ø“≥–±–∞—Ç—Ä–æ –∞–Ω“∑–æ–º –¥–æ–¥. –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –º—É—Ä–æ“∑–∏–∞—Ç! –õ—É—Ç—Ñ–∞–Ω, —Å–∏—Ñ–∞—Ç–∏ —Ö–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏—Ä–æ –±–∞“≥–æ –¥–∏“≥–µ–¥, —Ç–æ –º–æ –±–µ“≥—Ç–∞—Ä —à–∞–≤–µ–º. ‚ú®"
                if lang_client == "tj"
                else "–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ. ‚ú®"
            ),
            reply_markup=set_rating(appeal["id"]),
        )
        await message.answer(
            f"‚úÖ <b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç</b> –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ üëª"
        )
        logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è - {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏: {e} - {message.from_user.id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏")


# @router.message(F.text)
# async def manager_answer_appeal(message: Message):
#     """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
#     try:
#         logger.info(f"–û—Ç–≤–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—é - {message.chat.id}")
#         appeal = None
#         # appeal = get_appeal(manager_id=message.chat.id, status_id=2)
#         if appeal and isinstance(appeal, dict):
#             await bot.send_message(appeal["user_id"], message.text)
#             update_appeal(
#                 appeal["id"],
#                 last_message_at=datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
#             )
#
#             await start_timer(appeal["id"], appeal["user_id"], message.from_user.id)
#         else:
#             await message.answer("–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {e} - {message.chat.id}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


# @router.message(F.text)
# async def client_answer_appeal(message: Message):
#     """–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     try:
#         logger.info(f"–û—Ç–≤–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—é - {message.chat.id}")
#         appeal = None
#         # appeal = get_appeal(user_id=message.chat.id, status_id=2)
#         if appeal and isinstance(appeal, dict):
#             if appeal["manager_id"]:
#                 await start_timer(
#                     appeal["id"], message.from_user.id, appeal["manager_id"]
#                 )
#                 await bot.send_message(appeal["manager_id"], message.text)
#                 update_appeal(appeal["id"], last_message_at=datetime.now())
#             else:
#                 await message.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {e} - {message.chat.id}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@router.message(Command(commands=["admin"]), AdminFilter())
async def admin(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
    try:
        logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin - {message.chat.id}")
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=admin_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /admin: {e} - {message.chat.id}")


def register_handlers_admin():
    # --- Callback handlers ---
    router.callback_query.register(ask_period, F.data == "statistic", AdminFilter())
    router.callback_query.register(statistics, F.data.startswith("statistic-"))
    router.callback_query.register(close_appeal_by_manager, F.data == "close_appeal_by_manager")  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞
    router.callback_query.register(set_rating, F.data.startswith("set_rating-"))

    # --- Message handlers (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
    # router.message.register(manager_answer_appeal, F.text)
    # router.message.register(client_answer_appeal, F.text)
    router.message.register(close_appeal_by_manager, F.text.in_(["‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –ü”Ø—à–∏–¥–∞–Ω–∏ –∞—Ä–∏–∑–∞"]))

    # --- Command handlers ---
    router.message.register(admin, Command(commands=["admin"]), AdminFilter())
