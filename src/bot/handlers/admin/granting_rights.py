import secrets

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from loguru import logger

from src.bot.states.states import GrantingStates
from src.bot.system.dispatcher import router, bot
from src.core.database.database import set_user_role, UserRole


def get_user_role(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        role_record = UserRole.get_or_none(UserRole.user == user_id)
        return role_record.role if role_record else "user"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è {user_id}: {e}")
        return "user"


def check_user_password(user_id: int, entered_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º"""
    try:
        access = UserRole.get_or_none(UserRole.user == user_id)
        return access and access.password == entered_password
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return False


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è ===
def generate_six_digit_password() -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    return f"{secrets.randbelow(900000 + 100000):06d}"


# === –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ FSM ===

@router.callback_query(F.data == 'give_operator')
async def give_operator(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    await bot.send_message(
        callback_query.from_user.id,
        text="–ù–∞–ø–∏—à–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:"
    )
    await state.set_state(GrantingStates.user_id)


@router.message(StateFilter(GrantingStates.user_id))
async def process_user_id(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ—Ç –µ–º—É —Ä–æ–ª—å operator —Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"""
    user_id = message.text.strip()

    if not user_id.isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    user_id = int(user_id)
    username = "operator"
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        password = generate_six_digit_password()
        set_user_role(user_id=user_id, role=username, password=password)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{user_id}</b> –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n"
            f"üîë –õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–∞: <code>{username}</code>\n"
            f"üîë –ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞: <code>{password}</code>\n"
        )

        await state.clear()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤.")


def register_granting_rights_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    router.callback_query.register(give_operator, F.data == 'give_operator')
    router.message.register(process_user_id, StateFilter(GrantingStates.user_id))
