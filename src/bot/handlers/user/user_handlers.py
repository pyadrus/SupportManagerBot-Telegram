# -*- coding: utf-8 -*-
from datetime import datetime

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from loguru import logger

from src.bot.keyboards.user_keyboards import consent_or_edit_my_appeal, manage_appeal, edit_my_appeal
from src.bot.states.states import StartAppealStates
from src.bot.system.dispatcher import router, bot
from src.core.config.config import GROUP_ID
from src.core.database.database import db, get_user_lang, check_user_active_appeal, create_appeal, update_appeal


@router.callback_query(F.data == 'call_manager')
async def start_create_appeal(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)"""
    try:
        lang = get_user_lang(id_user=callback_query.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {lang}")
        await callback_query.answer()
        if check_user_active_appeal(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
            await callback_query.message.answer(
                "üí¨ –®—É–º–æ –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä –º—É–∫–æ–ª–∞–º–∞–∏ —Ñ–∞—ä–æ–ª “≥–∞—Å—Ç–µ–¥" if lang == 'tj' else "üí¨ –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ")
        else:
            await callback_query.message.answer(
                "üìù –ü–µ—à –∞–∑ –ø–∞–π–≤–∞—Å—Ç —à—É–¥–∞–Ω –±–æ –º—É—Ç–∞—Ö–∞—Å—Å–∏—Å, –ª—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –ø—É—Ä—Ä–∞–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥" if lang == 'tj' else "üìù –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
            await state.set_state(StartAppealStates.fio)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {callback_query.from_user.id}")


@router.message(StateFilter(StartAppealStates.fio))
async def fio_appeal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.update_data(fio=message.text)
        lang = get_user_lang(id_user=message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {lang}")
        await message.answer(
            "üìû –ë—É–∑—É—Ä–≥! –ê–∫–Ω—É–Ω —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ç–∞–º–æ—Å–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥" if lang == 'tj' else "üìû –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await state.set_state(StartAppealStates.phone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {message.chat.id}")


@router.message(StateFilter(StartAppealStates.phone))
async def phone_appeal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.update_data(phone=message.text)
        lang = get_user_lang(id_user=message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {lang}")
        await message.answer(
            "‚ùì –°–∞–≤–æ–ª –µ –º—É—à–∫–∏–ª–æ—Ç–∏ —Ö—É–¥—Ä–æ –±–∞ “õ–∞–¥—Ä–∏ –∏–º–∫–æ–Ω –º—É—Ñ–∞—Å—Å–∞–ª —Ç–∞–≤—Å–∏—Ñ –∫—É–Ω–µ–¥" if lang == 'tj' else "‚ùì –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
        await state.set_state(StartAppealStates.question)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {message.chat.id}")


@router.message(StateFilter(StartAppealStates.question))
async def question_appeal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.update_data(question=message.text)
        data = await state.get_data()
        lang = get_user_lang(id_user=message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {lang}")
        if lang == 'tj':
            text = f"""üìã –õ—É—Ç—Ñ–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–∏ –º—É—Ä–æ“∑–∏–∞—Ç–∏ —Ö—É–¥—Ä–æ —Å–∞–Ω“∑–µ–¥:\n
<b>üë§ –§–ò–û</b>: {data['fio']}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>: {data['phone']}
<b>‚ùì –°–∞–≤–æ–ª</b>: {data['question']}
\n–ê–≥–∞—Ä “≥–∞–º–∞ —á–∏–∑ –¥—É—Ä—É—Å—Ç –±–æ—à–∞–¥, –ª—É—Ç—Ñ–∞–Ω —Ç–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥ —ë –∞–≥–∞—Ä —Ç–∞“ì–π–∏—Ä–æ—Ç –ª–æ–∑–∏–º –±–æ—à–∞–¥, —Ö–∞–±–∞—Ä –¥–∏“≥–µ–¥"""
        else:
            text = f"""üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n
<b>üë§ –§–ò–û</b>: {data['fio']}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>: {data['phone']}
<b>‚ùì –í–æ–ø—Ä–æ—Å</b>: {data['question']}
\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –∏–Ω–∞—á–µ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"""
        await message.answer(text, reply_markup=consent_or_edit_my_appeal(lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {message.chat.id}")


@router.callback_query(F.data == 'consent_my_appeal')
async def consent_appeal(callback_query: CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ {callback_query.from_user.id}")
        lang = get_user_lang(id_user=callback_query.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {lang}")
        await callback_query.message.edit_text(
            "‚úÖ <b>–î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ “õ–∞–±—É–ª —à—É–¥!</b> –ú—É–Ω—Ç–∞–∑–∏—Ä –±–æ—à–µ–¥, –º—É—Ç–∞—Ö–∞—Å—Å–∏—Å–∏ –º–æ –±–∞ –∑—É–¥”£ –±–æ —à—É–º–æ —Ç–∞–º–æ—Å –º–µ–≥–∏—Ä–∞–¥. –ú–æ –∫–æ—Ä –º–µ–∫—É–Ω–µ–º, –¥–∞—Ä “≥–æ–ª–µ –∫–∏ —à–∞“≥—Ä —Ö–æ–± –∞—Å—Ç... üåô" if lang == 'tj' else "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b> –û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º, –ø–æ–∫–∞ –≥–æ—Ä–æ–¥ —Å–ø–∏—Ç... üåô")
        appeal_id = create_appeal(callback_query.from_user.id)
        update_appeal(appeal_id, last_message_at=datetime.now().strftime('%d.%m.%Y %H:%M:%S'))

        data = await state.get_data()
        text = f"""
üÜï –û–±—Ä–∞—â–µ–Ω–∏–µ {f'@{callback_query.from_user.username}' if callback_query.from_user.username else f'<code>{callback_query.from_user.id}</code>'}
üÜî <code>#{appeal_id}</code>
üïõ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{datetime.now().strftime("%d.%m.%Y %H:%M:%S")}</code>

<b>–§–ò–û:</b> <code>{data['fio']}</code>
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{data['phone']}</code>
<b>–í–æ–ø—Ä–æ—Å:</b> <code>{data['question']}</code>
        """
        await bot.send_message(GROUP_ID, text, reply_markup=manage_appeal())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {callback_query.from_user.id}")
    finally:
        await state.clear()


@router.callback_query(F.data == 'edit_my_appeal')
async def start_edit_appeal(callback_query: CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è {callback_query.from_user.id}")
        lang = await db.get_user_lang(callback_query.message.chat.id)
        await callback_query.message.delete_reply_markup()
        await callback_query.message.answer(
            "‚úçÔ∏èÔ∏è –î–∞—Ä –º—É–æ–º–∏–ª–æ—Ç–∏ —à—É–º–æ —á”£ —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ –º–µ—à–∞–≤–∞–¥?" if lang == "tj" else "‚úçÔ∏è –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏?",
            reply_markup=edit_my_appeal(lang))
        await state.set_state(StartAppealStates.edit_type)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {callback_query.from_user.id}")


@router.callback_query(StateFilter(StartAppealStates.edit_type), F.data.startswith('edit_appeal-'))
async def edit_type_appeal(callback_query: CallbackQuery, state: FSMContext):
    try:
        edit_type = callback_query.data.split("-")[1]
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ {edit_type} –æ–±—Ä–∞—â–µ–Ω–∏—è {callback_query.from_user.id}")
        await state.update_data(edit_type=edit_type)
        lang = await db.get_user_lang(callback_query.message.chat.id)
        if edit_type == 'fio':
            await callback_query.message.edit_text(
                "üìõ –õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –ø—É—Ä—Ä–∞–∏ –Ω–∞–≤—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥" if lang == "tj" else "üìõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û")
        elif edit_type == 'phone':
            await callback_query.message.edit_text(
                "üìû –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –Ω–∞–≤–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥" if lang == "tj" else "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        else:
            await callback_query.message.edit_text(
                "‚ùì –õ—É—Ç—Ñ–∞–Ω —Å–∞–≤–æ–ª–∏ –Ω–∞–≤—Ä–æ –Ω–∞–≤–∏—Å–µ–¥" if lang == "tj" else "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        await state.set_state(StartAppealStates.edit)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {callback_query.from_user.id}")


@router.message(StateFilter(StartAppealStates.edit))
async def edit_appeal(message: Message, state: FSMContext):
    try:
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è {message.from_user.id}")
        data = await state.get_data()
        await state.update_data(**{data['edit_type']: message.text})
        data = await state.get_data()
        lang = await db.get_user_lang(message.chat.id)
        if lang == 'tj':
            text = f"""üìã –ú–∞—ä–ª—É–º–æ—Ç –Ω–∞–≤ –∫–∞—Ä–¥–∞ —à—É–¥, –∞—Ä–∏–∑–∞—Ä–æ —Ç–∞—Ñ—Ç–∏—à –∫—É–Ω–µ–¥:\n
<b>üë§ –§–ò–û</b>: {data['fio']}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>: {data['phone']}
<b>‚ùì –°–∞–≤–æ–ª</b>: {data['question']}
\n–ê–≥–∞—Ä “≥–∞–º–∞ —á–∏–∑ –¥—É—Ä—É—Å—Ç –±–æ—à–∞–¥, –ª—É—Ç—Ñ–∞–Ω —Ç–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥ —ë –∞–≥–∞—Ä —Ç–∞“ì–π–∏—Ä–æ—Ç –ª–æ–∑–∏–º –±–æ—à–∞–¥, —Ö–∞–±–∞—Ä –¥–∏“≥–µ–¥"""
        else:
            text = f"""üìã –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n
<b>üë§ –§–ò–û</b>: {data['fio']}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>: {data['phone']}
<b>‚ùì –í–æ–ø—Ä–æ—Å</b>: {data['question']}
\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –∏–Ω–∞—á–µ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"""
        await message.answer(text, reply_markup=consent_or_edit_my_appeal(lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e} - {message.from_user.id}")


@router.callback_query(F.data.startswith("set_rating-"))
async def set_rating(callback_query: CallbackQuery):
    try:
        lang = await db.get_user_lang(callback_query.from_user.id)
        await callback_query.message.edit_text("–¢–∞—à–∞–∫–∫—É—Ä :)" if lang == 'tj' else "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º :)")
        data = callback_query.data.split('-')
        await db.update_appeal_data(data[1], rating=data[2])
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è {data[1]} - {data[2]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e} - {callback_query.from_user.id}")


def register_user_handler():
    # --- Callback handlers ---
    router.callback_query.register(start_create_appeal, F.data == 'call_manager')
    router.callback_query.register(consent_appeal, F.data == 'consent_my_appeal')
    router.callback_query.register(start_edit_appeal, F.data == 'edit_my_appeal')
    router.callback_query.register(edit_type_appeal, F.data.startswith('edit_appeal-'))
    router.callback_query.register(set_rating, F.data.startswith('set_rating-'))

    # --- FSM message handlers ---
    router.message.register(fio_appeal, StateFilter(StartAppealStates.fio))
    router.message.register(phone_appeal, StateFilter(StartAppealStates.phone))
    router.message.register(question_appeal, StateFilter(StartAppealStates.question))
    router.message.register(edit_appeal, StateFilter(StartAppealStates.edit))
