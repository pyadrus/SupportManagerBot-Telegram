# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from loguru import logger

from src.bot.keyboards.keyboards import choose_lang, start, admin_keyboard
from src.bot.middlewares.middlewares import AdminFilter
from src.bot.system.dispatcher import router
from src.core.database.database import register_user, set_user_lang


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        logger.info(f'–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start - {message.chat.id}')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": message.from_user.id,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "username": message.from_user.username,
            "chat_id": str(message.chat.id),  # chat.id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            "date": message.date  # DateTime object from aiogram
        }

        register_user(user_data)

        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è</b> / <b>–•—É—à –æ–º–∞–¥–µ–¥! –ó–∞–±–æ–Ω–∏ –º—É–æ–º–∏–ª–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:</b>",
            reply_markup=choose_lang()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {e} - {message.chat.id}")


@router.callback_query(F.data.startswith("lang-"))
async def choose_lang_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    try:
        lang = call.data.split('-')[1]
        logger.info(f'–í—ã–±—Ä–∞–Ω —è–∑—ã–∫ {lang} - {call.from_user.id}')
        set_user_lang(call.from_user.id, lang)
        await call.message.edit_text(
            "–ß”£ —Ç–∞–≤—Ä –º–∞–Ω –º–µ—Ç–∞–≤–æ–Ω–∞–º –∫”Ø–º–∞–∫ –∫—É–Ω–∞–º, —Å–∞–π—ë“≥? ‚ú®" if lang == 'tj' else "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å, –ø—É—Ç–Ω–∏–∫? ‚ú®",
            reply_markup=start(lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e} - {call.from_user.id}")
    finally:
        await state.clear()


@router.message(Command(commands=['admin']), AdminFilter())
async def admin(message: Message):
    try:
        logger.info(f'–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin - {message.chat.id}')
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                             reply_markup=admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /admin: {e} - {message.chat.id}")


def register_commands():
    router.message.register(cmd_start, CommandStart())
    router.message.register(admin, Command(commands=['admin']), AdminFilter())
    router.callback_query.register(choose_lang_handler, F.data.startswith("lang-"))