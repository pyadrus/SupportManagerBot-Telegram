# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from src.bot.keyboards.keyboards import choose_lang, start
from src.bot.system.dispatcher import router
from src.core.database.database import register_user, set_user_lang


@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    src/core/database/database.db, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start.
    """
    try:
        logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start - {message.chat.id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": message.from_user.id, # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "first_name": message.from_user.first_name, # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "last_name": message.from_user.last_name, # –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "username": message.from_user.username, # Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "lang": 'ru', # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
            "date": message.date,  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        }
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö src/core/database/database.db
        register_user(user_data)

        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è</b> / <b>–•—É—à –æ–º–∞–¥–µ–¥! –ó–∞–±–æ–Ω–∏ –º—É–æ–º–∏–ª–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:</b>",
            reply_markup=choose_lang(), # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {e} - {message.chat.id}")


@router.callback_query(F.data.startswith("lang-"))
async def choose_lang_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    try:
        lang = call.data.split("-")[1]
        logger.info(f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫ {lang} - {call.from_user.id}")
        set_user_lang(call.from_user.id, lang)
        await call.message.edit_text(
            (
                "–ß”£ —Ç–∞–≤—Ä –º–∞–Ω –º–µ—Ç–∞–≤–æ–Ω–∞–º –∫”Ø–º–∞–∫ –∫—É–Ω–∞–º, —Å–∞–π—ë“≥? ‚ú®"
                if lang == "tj"
                else "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å, –ø—É—Ç–Ω–∏–∫? ‚ú®"
            ),
            reply_markup=start(lang),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e} - {call.from_user.id}")
    finally:
        await state.clear()


def register_commands():
    router.message.register(cmd_start, CommandStart())
    router.callback_query.register(choose_lang_handler, F.data.startswith("lang-"))
