from pathlib import Path
from typing import Dict, List
from typing import Optional

import uvicorn
from fastapi import FastAPI, Request
from fastapi import Form
from fastapi import WebSocket
from fastapi.responses import HTMLResponse
from fastapi.responses import RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger

from src.core.database.database import get_all_authorization_data

app = FastAPI()
BASE_DIR = Path(__file__).resolve().parent
STATIC_DIR = BASE_DIR / "static"
TEMPLATES_DIR = BASE_DIR / "templates"

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É (—Å—Ç–∏–ª–∏, —Å–∫—Ä–∏–ø—Ç—ã)
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")
# –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω–∞–º
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ===
# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ======
# active_connections: Dict[int, List[WebSocket]] = {}


@app.get("/operator", response_class=HTMLResponse)
async def operator_page(request: Request):
    return templates.TemplateResponse("operator.html", {
        "request": request,
        # "operator_id": operator_id
    })


# @app.websocket("/ws/{appeal_id}")
# async def websocket_endpoint(websocket: WebSocket, appeal_id: int):
#     await websocket.accept()
#     if appeal_id not in active_connections:
#         active_connections[appeal_id] = []
#     active_connections[appeal_id].append(websocket)
#     logger.info(f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ appeal_id={appeal_id}")
#
#     try:
#         while True:
#             data = await websocket.receive_json()
#
#             message_text = data.get("message_text")
#             sender = data.get("sender", "operator")
#             operator_id = data.get("operator_id", None)
#             user_id = data.get("user_id", None)
#
#             logger.info(f"[{sender}] {message_text}")
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫ —ç—Ç–æ–º—É appeal
#             for conn in active_connections[appeal_id]:
#                 await conn.send_json({
#                     "message_text": message_text,
#                     "sender": sender,
#                     "timestamp": datetime.now().strftime("%H:%M")
#                 })
#
#             # === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏ Telegram ===
#             if sender == "operator" and operator_id:
#                 try:
#                     # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
#                     appeal = get_appeal(user_id=user_id)
#                     if not appeal:
#                         raise Exception("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#
#                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
#                     await bot.send_message(
#                         user_id,
#                         f"üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä:\n{message_text}"
#                     )
#
#                     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
#                     update_appeal(
#                         appeal_id=appeal_id,
#                         status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
#                         operator_id=operator_id,
#                         last_message_at=datetime.now()
#                     )
#
#                     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#                     write_to_db(
#                         appeal_id=appeal_id,
#                         operator_id=operator_id,
#                         user_id=None,
#                         message_text=message_text,
#                         name_db=operator_id
#                     )
#
#                     # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
#                     await start_timer(appeal_id, user_id, operator_id)
#                     logger.info(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: appeal_id={appeal_id}")
#                 except Exception as e:
#                     logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
#             else:
#                 logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –Ω–µ—Ç operator_id")
#
#     except WebSocketDisconnect:
#         active_connections[appeal_id].remove(websocket)
#         logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç appeal_id={appeal_id}")
#         if not active_connections[appeal_id]:
#             del active_connections[appeal_id]


# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@app.get("/admin", response_class=HTMLResponse)
async def admin_page(request: Request):
    return templates.TemplateResponse("admin.html", {"request": request})


# === –£–±–∏—Ä–∞–µ–º /login, –¥–µ–ª–∞–µ–º –≤—Å—ë –Ω–∞ –≥–ª–∞–≤–Ω–æ–π ===


@app.get("/", response_class=HTMLResponse)
async def login_page(request: Request, error: Optional[str] = None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö src/core/database/database.db

    return templates.TemplateResponse(
        "index.html", {"request": request, "error": error}
    )


@app.post("/login")
async def login(username: str = Form(...), password: str = Form(...)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.
    –ï—Å–ª–∏ –≤–µ—Ä–Ω—ã–µ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ /operator –∏–ª–∏ /admin.
    –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å –æ—à–∏–±–∫–æ–π.
    """
    try:
        data = get_all_authorization_data()
        logger.debug("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {}", data)

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º username –∏ password
        user_match = None
        for entry in data:
            if entry["username"] == username and entry["password"] == password:
                user_match = entry
                break

        if user_match:
            if username == "admin":
                return RedirectResponse(url="/admin", status_code=303)
            else:
                return RedirectResponse(url="/operator", status_code=303)

        # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return RedirectResponse(url="/?error=–ù–µ–≤–µ—Ä–Ω—ã–π+–ª–æ–≥–∏–Ω+–∏–ª–∏+–ø–∞—Ä–æ–ª—å", status_code=303)
    except Exception as e:
        logger.exception(e)


if __name__ == "__main__":
    uvicorn.run("app:app", host="127.0.0.1", port=8080, reload=True)
